import { AxiosInstance } from "axios";
import { HubstaffConfig, TasksQuery, ProjectsQuery, ClientsQuery, ActivitiesQuery, Project, Client, User, Task, Activity, Organization, OrganizationMember, OrganizationMembersQuery, DailyActivity } from "./types";
declare class Hubstaff {
    api: AxiosInstance;
    accessToken: HubstaffConfig["tokens"]["accessToken"];
    refreshToken: HubstaffConfig["tokens"]["refreshToken"];
    refreshCallback: (accessToken: string, refreshToken: string) => void;
    constructor(tokens: HubstaffConfig["tokens"], refreshCallback: HubstaffConfig["refreshCallback"]);
    static getAccessToken(refreshToken: string): Promise<HubstaffConfig["tokens"]>;
    private unixTimeNow;
    checkToken(): Promise<void>;
    request(endpoint: string, params?: any): Promise<any>;
    /**
     * Returns a collection of organizations the authenticated user is an active member of.
     * @param {PaginationType} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/organizations/getV2Organizations}.
     */
    getOrganizations(): Promise<Organization[]>;
    /**
     * Returns a collection of users that are a member of the given organization.
     * @param {number} organizationId
     * @param {OrganizationMembersQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/organizations/getV2OrganizationsOrganizationIdMembers}.
     */
    getOrganizationMembers(organizationId: number, params?: OrganizationMembersQuery): Promise<OrganizationMember[]>;
    /**
     * Returns a collection of projects.
     * @param {number} organizationId
     * @param {ProjectsQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/projects/getV2OrganizationsOrganizationIdProjects}.
     */
    getProjects(organizationId: number, params?: ProjectsQuery): Promise<Project[]>;
    /**
     * Returns the project with a given ID.
     * @param {number} projectId
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/projects/getV2ProjectsProjectId}.
     */
    getProject(projectId: number): Promise<Project>;
    /**
     * Returns a collection of clients that are a member of the given organization
     * @param {number} organizationId
     * @param {ClientsQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/clients/getV2OrganizationsOrganizationIdClients}.
     */
    getClients(organizationId: number, params?: ClientsQuery): Promise<Client[]>;
    /**
     * Returns the user with a given ID.
     * @param {number} userId
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/users/getV2UsersUserId}
     */
    getUser(userId: number): Promise<User>;
    /**
     * Returns a collection of tasks. The tasks can optionally be filtered to those of a given organization.
     * @param {number} organizationId
     * @param {TasksQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/tasks/getV2OrganizationsOrganizationIdTasks}.
     */
    getTasks(organizationId: number, params?: TasksQuery): Promise<Task[]>;
    /**
     * Returns the task with a given ID.
     * @param {number} taskId
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/tasks/getV2TasksTaskId}.
     */
    getTask(taskId: number): Promise<Task>;
    /**
     * Returns a collection of activities. The activities can optionally be filtered to those of a given organization.
     * The preferred endpoints to fetch data about activities are the daily endpoints.
     * @summary Date range Limit: 7 days
     * @summary Earliest Date: 6 full months
     * @param {number} organizationId
     * @param {ActivitiesQuery} params
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/activities/getV2OrganizationsOrganizationIdActivities}.
     */
    getActivities(organizationId: number, params: ActivitiesQuery): Promise<Activity[]>;
    /**
     * Returns a collection of daily activities. Daily activities are aggregated activities by the organization date.
     * The daily activities can optionally be filtered to those of a given organization.
     * @summary Date range Limit: 31 days
     * @summary Earliest Date: 3 full years
     * @param {number} organizationId
     * @param {ActivitiesQuery} params
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/activities/getV2OrganizationsOrganizationIdActivitiesDaily}.
     */
    getDailyActivities(organizationId: number, params: ActivitiesQuery): Promise<DailyActivity[]>;
}
export = Hubstaff;
