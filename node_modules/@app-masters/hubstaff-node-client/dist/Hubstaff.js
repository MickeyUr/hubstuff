"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var axios_1 = __importDefault(require("axios"));
var jwt_decode_1 = __importDefault(require("jwt-decode"));
var PAGE_LIMIT = 500;
var Hubstaff = /** @class */ (function () {
    function Hubstaff(tokens, refreshCallback) {
        this.accessToken = tokens.accessToken;
        this.refreshToken = tokens.refreshToken;
        this.refreshCallback = refreshCallback;
        this.api = axios_1.default.create({
            baseURL: "https://api.hubstaff.com/v2",
            headers: {
                Authorization: "Bearer " + this.accessToken,
            },
        });
    }
    Hubstaff.getAccessToken = function (refreshToken) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post("https://account.hubstaff.com/access_tokens", {}, {
                                params: {
                                    grant_type: "refresh_token",
                                    refresh_token: refreshToken,
                                },
                            })];
                    case 1:
                        res = _d.sent();
                        return [2 /*return*/, {
                                accessToken: res.data.access_token,
                                refreshToken: res.data.refresh_token,
                            }];
                    case 2:
                        error_1 = _d.sent();
                        console.log("Error getting the access token: ", (_a = error_1.response) === null || _a === void 0 ? void 0 : _a.data);
                        throw __assign({ status: (_b = error_1.response) === null || _b === void 0 ? void 0 : _b.status }, (_c = error_1.response) === null || _c === void 0 ? void 0 : _c.data);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Hubstaff.prototype.unixTimeNow = function () {
        return Date.now() / 1000;
    };
    Hubstaff.prototype.checkToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var decodedToken, _a, accessToken, refreshToken, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.accessToken) {
                            throw new Error("You must set access token. Call Hubstaff.getAccessToken('your-refresh-token')");
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, , 6]);
                        decodedToken = jwt_decode_1.default(this.accessToken);
                        if (!(decodedToken.exp < this.unixTimeNow())) return [3 /*break*/, 4];
                        return [4 /*yield*/, Hubstaff.getAccessToken(this.refreshToken)];
                    case 2:
                        _a = _b.sent(), accessToken = _a.accessToken, refreshToken = _a.refreshToken;
                        this.accessToken = accessToken;
                        this.refreshToken = refreshToken;
                        return [4 /*yield*/, this.refreshCallback(this.accessToken, this.refreshToken)];
                    case 3:
                        _b.sent();
                        this.api = axios_1.default.create({
                            baseURL: "https://api.hubstaff.com/v2",
                            headers: {
                                Authorization: "Bearer " + this.accessToken,
                            },
                        });
                        _b.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_2 = _b.sent();
                        console.log(error_2);
                        throw new Error("Error checking the token");
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Hubstaff.prototype.request = function (endpoint, params) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_3;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.checkToken()];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.api.get(endpoint, { params: params })];
                    case 3:
                        res = _d.sent();
                        return [2 /*return*/, res.data];
                    case 4:
                        error_3 = _d.sent();
                        console.log("Request Error: ", (_a = error_3.response) === null || _a === void 0 ? void 0 : _a.data);
                        throw __assign({ status: (_b = error_3.response) === null || _b === void 0 ? void 0 : _b.status }, (_c = error_3.response) === null || _c === void 0 ? void 0 : _c.data);
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a collection of organizations the authenticated user is an active member of.
     * @param {PaginationType} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/organizations/getV2Organizations}.
     */
    Hubstaff.prototype.getOrganizations = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var organizations, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        organizations = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.organizations.forEach(function (obj) { return organizations === null || organizations === void 0 ? void 0 : organizations.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, organizations];
                }
            });
        });
    };
    /**
     * Returns a collection of users that are a member of the given organization.
     * @param {number} organizationId
     * @param {OrganizationMembersQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/organizations/getV2OrganizationsOrganizationIdMembers}.
     */
    Hubstaff.prototype.getOrganizationMembers = function (organizationId, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var members, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        members = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations/" + organizationId + "/members", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                            include_removed: params === null || params === void 0 ? void 0 : params.includeRemoved,
                            include_projects: params === null || params === void 0 ? void 0 : params.includeProjects,
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.members.forEach(function (obj) { return members === null || members === void 0 ? void 0 : members.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, members];
                }
            });
        });
    };
    /**
     * Returns a collection of projects.
     * @param {number} organizationId
     * @param {ProjectsQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/projects/getV2OrganizationsOrganizationIdProjects}.
     */
    Hubstaff.prototype.getProjects = function (organizationId, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var projects, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        projects = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations/" + organizationId + "/projects", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                            status: (params === null || params === void 0 ? void 0 : params.status) || "active",
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.projects.forEach(function (obj) { return projects === null || projects === void 0 ? void 0 : projects.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, projects];
                }
            });
        });
    };
    /**
     * Returns the project with a given ID.
     * @param {number} projectId
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/projects/getV2ProjectsProjectId}.
     */
    Hubstaff.prototype.getProject = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request("projects/" + projectId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.project];
                }
            });
        });
    };
    /**
     * Returns a collection of clients that are a member of the given organization
     * @param {number} organizationId
     * @param {ClientsQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/clients/getV2OrganizationsOrganizationIdClients}.
     */
    Hubstaff.prototype.getClients = function (organizationId, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var clients, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        clients = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations/" + organizationId + "/clients", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                            status: (params === null || params === void 0 ? void 0 : params.status) || "active",
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.clients.forEach(function (obj) { return clients === null || clients === void 0 ? void 0 : clients.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, clients];
                }
            });
        });
    };
    /**
     * Returns the user with a given ID.
     * @param {number} userId
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/users/getV2UsersUserId}
     */
    Hubstaff.prototype.getUser = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request("/users/" + userId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.user];
                }
            });
        });
    };
    /**
     * Returns a collection of tasks. The tasks can optionally be filtered to those of a given organization.
     * @param {number} organizationId
     * @param {TasksQuery} [params]
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/tasks/getV2OrganizationsOrganizationIdTasks}.
     */
    Hubstaff.prototype.getTasks = function (organizationId, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var tasks, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tasks = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations/" + organizationId + "/tasks", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                            status: params === null || params === void 0 ? void 0 : params.status,
                            user_ids: params === null || params === void 0 ? void 0 : params.userIds,
                            project_ids: params === null || params === void 0 ? void 0 : params.projectIds,
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.tasks.forEach(function (obj) { return tasks === null || tasks === void 0 ? void 0 : tasks.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, tasks];
                }
            });
        });
    };
    /**
     * Returns the task with a given ID.
     * @param {number} taskId
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/tasks/getV2TasksTaskId}.
     */
    Hubstaff.prototype.getTask = function (taskId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request("tasks/" + taskId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.task];
                }
            });
        });
    };
    /**
     * Returns a collection of activities. The activities can optionally be filtered to those of a given organization.
     * The preferred endpoints to fetch data about activities are the daily endpoints.
     * @summary Date range Limit: 7 days
     * @summary Earliest Date: 6 full months
     * @param {number} organizationId
     * @param {ActivitiesQuery} params
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/activities/getV2OrganizationsOrganizationIdActivities}.
     */
    Hubstaff.prototype.getActivities = function (organizationId, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var activities, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        activities = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations/" + organizationId + "/activities", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                            user_ids: params === null || params === void 0 ? void 0 : params.userIds,
                            project_ids: params === null || params === void 0 ? void 0 : params.projectIds,
                            task_ids: params === null || params === void 0 ? void 0 : params.taskIds,
                            "time_slot[start]": params === null || params === void 0 ? void 0 : params.startTime.toISOString(),
                            "time_slot[stop]": params === null || params === void 0 ? void 0 : params.stopTime.toISOString(),
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.activities.forEach(function (obj) { return activities === null || activities === void 0 ? void 0 : activities.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, activities];
                }
            });
        });
    };
    /**
     * Returns a collection of daily activities. Daily activities are aggregated activities by the organization date.
     * The daily activities can optionally be filtered to those of a given organization.
     * @summary Date range Limit: 31 days
     * @summary Earliest Date: 3 full years
     * @param {number} organizationId
     * @param {ActivitiesQuery} params
     * @see See also {@link https://developer.hubstaff.com/docs/hubstaff_v2#!/activities/getV2OrganizationsOrganizationIdActivitiesDaily}.
     */
    Hubstaff.prototype.getDailyActivities = function (organizationId, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var daily_activities, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        daily_activities = [];
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.request("/organizations/" + organizationId + "/activities/daily", {
                            page_start_id: (_a = res === null || res === void 0 ? void 0 : res.pagination) === null || _a === void 0 ? void 0 : _a.next_page_start_id,
                            page_limit: PAGE_LIMIT,
                            user_ids: params === null || params === void 0 ? void 0 : params.userIds,
                            project_ids: params === null || params === void 0 ? void 0 : params.projectIds,
                            task_ids: params === null || params === void 0 ? void 0 : params.taskIds,
                            "date[start]": params === null || params === void 0 ? void 0 : params.startTime.toISOString(),
                            "date[stop]": params === null || params === void 0 ? void 0 : params.stopTime.toISOString(),
                        })];
                    case 2:
                        res = _b.sent();
                        res === null || res === void 0 ? void 0 : res.daily_activities.forEach(function (obj) { return daily_activities === null || daily_activities === void 0 ? void 0 : daily_activities.push(obj); });
                        _b.label = 3;
                    case 3:
                        if (res === null || res === void 0 ? void 0 : res.pagination) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/, daily_activities];
                }
            });
        });
    };
    return Hubstaff;
}());
module.exports = Hubstaff;
